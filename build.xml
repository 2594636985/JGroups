<?xml version="1.0"?>

<!-- $Id: build.xml,v 1.34.4.2 2006/08/08 08:58:13 mimbert Exp $ -->

<project name="JGroups" default="compile" basedir=".">
    <description>
        build.xml file for JGroups. Needs Ant (jakarta.apache.org) to run
    </description>

    <property file="build.properties"/>
    <property name="root.dir" value="${basedir}"/>
    <property name="src.dir" value="${root.dir}/src"/>
    <property name="tests.dir" value="${root.dir}/tests/other"/>
    <property name="junit.dir" value="${root.dir}/tests/junit"/>
    <property name="stress.dir" value="${root.dir}/tests/stress"/>
    <property name="perf.dir" value="${root.dir}/tests/perf"/>
    <property name="compile.dir" value="${root.dir}/classes"/>
    <property name="compile-cdc.dir" value="${root.dir}/classes-cdc"/>
    <property name="lib.dir" value="${root.dir}/lib"/>
    <property name="dist.dir" value="${root.dir}/dist"/>
    <property name="tmp.dir" value="${root.dir}/tmp"/>
    <property name="doc.dir" value="${root.dir}/doc"/>
    <property name="javadoc.dir" value="${dist.dir}/javadoc"/>
    <property name="conf.dir" value="${root.dir}/conf"/>
    <property name="pg.dir" value="${doc.dir}/progguide"/>
	<property name="keystore.dir" value="${root.dir}/keystore"/>
    <property name="docbook.dir" value="${pg.dir}/docbook-xsl"/>
    <property name="build.compiler.emacs" value="true"/>
    <property name="javadoc.packages" value="org.jgroups.*"/>
    <property name="unittest.timeout.low" value="120000"/>
    <property name="unittest.timeout.high" value="280000"/>
    <property name="version" value="2.2.9.3-cdc"/>


    <path id="jg.classpath">
        <pathelement location="${compile.dir}"/>
        <pathelement location="${conf.dir}"/>
    	<pathelement location="${keystore.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
            <exclude name="*-cdc.jar"/>
        </fileset>
    </path>


    <path id="jg-cdc.classpath">
        <pathelement location="${compile-cdc.dir}"/>
        <pathelement location="${conf.dir}"/>
    	<pathelement location="${keystore.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="*-cdc.jar"/>
        </fileset>
    </path>


    <path id="fop.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>


    <target name="prepare">
        <property environment="env"/>
        <mkdir dir="${compile.dir}"/>
        <mkdir dir="${compile-cdc.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/pg"/>
        <mkdir dir="${dist.dir}/pg/html"/>
        <mkdir dir="${dist.dir}/pg/pdf"/>
        <mkdir dir="${javadoc.dir}"/>
    </target>


    <target name="compile"
        depends="prepare"
        description="Compiles are Java files">
        <javac destdir="${compile.dir}"
            source="1.4"
            classpathref="jg.classpath"
            debug="on"
            deprecation="off"
            optimize="off"
            listfiles="false"
            includes="org/jgroups/**">
            <exclude name="**/obsolete/**"/>
            <exclude name="**/*1_5*"/>
            <src path="${src.dir}"/>
            <src path="${tests.dir}"/>
            <src path="${junit.dir}"/>
            <src path="${stress.dir}"/>
            <src path="${perf.dir}"/>
        </javac>
    </target>


    <target name="compile-cdc"
        depends="prepare"
        description="Compiles are Java files for j2me/cdc/pp 1.0 configuration. For this to work, you need to define the CDCPPBOOTCLASSPATH property.">
        <javac destdir="${compile-cdc.dir}"
            source="1.3"
            target="1.3"
            bootclasspath="${CDCPPBOOTCLASSPATH}"
            classpathref="jg-cdc.classpath"
            debug="on"
            deprecation="off"
            optimize="off"
            listfiles="false"
            includes="org/jgroups/**">
            <exclude name="**/obsolete/**"/>
            <exclude name="**/*1_5*"/>
            <src path="${src.dir}"/>
            <src path="${tests.dir}"/>
            <src path="${junit.dir}"/>
            <src path="${stress.dir}"/>
            <src path="${perf.dir}"/>

            <exclude name="**/*1_4*"/>
            <exclude name="**/debug/**"/>
            <exclude name="**/demos/**"/>
            <exclude name="**/*NIO*"/>
            <exclude name="**/jmx/**"/>
            <exclude name="org/jgroups/persistence/DBPersistenceManager.java"/>
            <exclude name="org/jgroups/util/Proxy.java"/>
            <exclude name="org/jgroups/util/GetNetworkInterfaces.java"/>
            <exclude name="org/jgroups/stack/LogicalAddress.java"/> <!-- currently not needed as only UDP_NIO uses it -->
            <exclude name="org/jgroups/protocols/BSH.java"/>
            <exclude name="org/jgroups/protocols/JMS.java"/>
            <exclude name="org/jgroups/protocols/ENCRYPT14KeystoreTest.java"/>
            <exclude name="org/jgroups/protocols/ENCRYPTAsymmetricTest.java"/>
            <exclude name="org/jgroups/protocols/ENCRYPT.java"/> <!-- TODO: allow ENCRYPT compilation if we have the JCE extension -->
            <!-- TODO: allow X509 token for auth if we have the JCE extensions (already excluded by the name ending with 1_5 rule) -->
            <exclude name="org/jgroups/tests/PartitionerTest.java"/>
            <exclude name="org/jgroups/tests/HashtableTest.java"/>
            <exclude name="org/jgroups/tests/MessageDispatcherTestAsync.java"/>
            <exclude name="org/jgroups/tests/SpeedTest.java"/>
            <exclude name="org/jgroups/tests/EncryptMessageOrderTestCase.java"/>
            <exclude name="org/jgroups/tests/JmxTest.java"/>
            <exclude name="org/jgroups/tests/PartitionerTest.java"/>
            <exclude name="org/jgroups/tests/adaptjms/**"/>
            <exclude name="org/jgroups/tests/perf/transports/JmsTransport.java"/>
            <exclude name="org/jgroups/tests/Bsh.java"/>
            <exclude name="org/jgroups/tests/LogicalAddressTest.java"/>
            <exclude name="org/jgroups/tests/UNICAST_Test.java"/>
            <exclude name="org/jgroups/tests/perf/transports/JGroupsTransport.java"/>
            <exclude name="org/jgroups/tests/perf/transports/JGroupsClusterTransport.java"/>
            <exclude name="org/jgroups/tests/perf/Test.java"/>
            <exclude name="org/jgroups/tests/EncryptMessageOrderTest.java"/>
            <exclude name="org/jgroups/tests/EncryptOrderTestHeader.java"/>
            <exclude name="org/jgroups/tests/SizeTest.java"/>
        </javac>
    </target>


    <target name="compile-1.5"
         depends="prepare"
         description="Compiles are Java files (including files dependent on JDK 1.5)">
         <javac destdir="${compile.dir}"
             source="1.5"
             classpathref="jg.classpath"
             debug="on"
             deprecation="off"
             optimize="off"
             listfiles="false"
             includes="org/jgroups/**">
             <exclude name="**/obsolete/**"/>
             <src path="${src.dir}"/>
             <src path="${tests.dir}"/>
             <src path="${junit.dir}"/>
             <src path="${stress.dir}"/>
             <src path="${perf.dir}"/>
         </javac>
     </target>


    <target name="jar"
        description="Compiles and creates JAR files in the ./dist directory"
        depends="compile,
                jgroups-all.jar,
                jgroups-core.jar">
    </target>


    <target name="jar-cdc"
        description="Compiles and creates j2me/cdc/pp 1.0 versions of JAR files in the ./dist directory"
        depends="compile-cdc,
                jgroups-all-cdc.jar,
                jgroups-core-cdc.jar">
    </target>


    <target name="jar-1.5"
        description="Compiles for 1.5 and creates JAR files in the ./dist directory"
        depends="compile-1.5,
                jgroups-all.jar,
                jgroups-core.jar">
    </target>


    <target name="jgroups-all.jar"
        description="Creates the jgroups-all.jar (includes everything)">
        <jar destfile="${dist.dir}/jgroups-all.jar"
            basedir="${compile.dir}"
            manifest="${conf.dir}/manifest.mf"
            includes="org/jgroups/**">
            <fileset dir="${conf.dir}" includes="*.dtd, *.xml" excludes="jboss-service.xml" />
        </jar>
    </target>

    <target name="jgroups-core.jar"
        description="Creates the jgroups-core.jar. Includes only core file, no demos">
        <jar jarfile="${dist.dir}/jgroups-core.jar"
            basedir="${compile.dir}"
            manifest="${conf.dir}/manifest.mf"
            includes="org/jgroups/**"
            excludes="org/jgroups/demos/**,
                      org/jgroups/tests/**,
                      org/jgroups/**/*Test.class,
                      org/jgroups/**/*Test\$*.class">
            <fileset dir="${conf.dir}" includes="*.dtd, *.xml" excludes="jboss-service.xml"/>
        </jar>
    </target>


    <target name="jgroups-all-cdc.jar"
        description="Creates the jgroups-all.jar for j2me/cdc/pp 1.0 (includes everything that can work in this configuration)">
        <jar destfile="${dist.dir}/jgroups-all-cdc.jar"
            basedir="${compile-cdc.dir}"
            manifest="${conf.dir}/manifest.mf"
            includes="org/jgroups/**">
            <fileset dir="${conf.dir}" includes="*.dtd, *.xml" excludes="jboss-service.xml" />
        </jar>
    </target>


    <target name="jgroups-core-cdc.jar"
        description="Creates the jgroups-cdc.jar. Includes only core file, targetting j2me/cdc/pp 1.0 configuration">
        <jar jarfile="${dist.dir}/jgroups-core-cdc.jar"
            basedir="${compile-cdc.dir}"
            manifest="${conf.dir}/manifest.mf"
            includes="org/jgroups/**"
            excludes="org/jgroups/demos/**,
                      org/jgroups/tests/**,
                      org/jgroups/**/*Test.class,
                      org/jgroups/**/*Test\$*.class">
            <fileset dir="${conf.dir}" includes="*.dtd, *.xml" excludes="jboss-service.xml"/>
        </jar>
    </target>


    <target name="dist" description="Creates the distribution ZIP files in ./dist">
        <antcall target="src-dist"/>
        <antcall target="bin-dist"/>
    </target>


    <target name="src-dist" depends="clean">
        <echo message="Creating source distribution ${dist.dir}/JGroups-${version}.src.zip"/>
        <mkdir dir="${tmp.dir}/JGroups-${version}.src"/>
        <copy todir="${tmp.dir}/JGroups-${version}.src">
            <fileset dir="${root.dir}">
                <exclude name="*CVS*"/>
                <exclude name="doc/progguide/**"/>
                <exclude name="doc/usersguide/**"/>
            </fileset>
        </copy>

        <mkdir dir="${dist.dir}"/>
        <zip zipfile="${dist.dir}/JGroups-${version}.src.zip" basedir="${tmp.dir}" filesonly="true"/>
        <delete dir="${tmp.dir}" failonerror="false"/>
    </target>

     <target name="bin-dist" depends="jar, jar-cdc">
         <echo message="Creating binary distribution ${dist.dir}/JGroups-${version}.bin.zip"/>
         <mkdir dir="${tmp.dir}/JGroups-${version}.bin"/>
         <copy todir="${tmp.dir}/JGroups-${version}.bin">
             <fileset dir="${root.dir}">
                 <include name="CREDITS"/>
                 <include name="INSTALL.html"/>
             </fileset>
             <fileset dir="${lib.dir}">
                 <include name="commons-logging*.jar"/>
                 <include name="log4j*.jar"/>
                 <include name="concurrent*.jar"/>
                 <include name="xerces*.jar"/>
                 <include name="jmx*.jar"/>
             </fileset>
             <fileset dir="${dist.dir}">
                 <include name="jgroups-all*.jar"/>
             </fileset>
         </copy>
         <mkdir dir="${dist.dir}"/>
         <zip zipfile="${dist.dir}/JGroups-${version}.bin.zip" basedir="${tmp.dir}" filesonly="true"/>
         <delete dir="${tmp.dir}" failonerror="false"/>
    </target>

    <target name="jboss-service"
        description="Creates the service archive used to deploy GossipServer as a JBoss MBean">
        <jar jarfile="${dist.dir}/jgroups-router.sar"
            basedir="${compile.dir}"
            includes="org/jgroups/**"
            excludes="org/jgroups/demos/**,
                      org/jgroups/tests/**,
                      org/jgroups/**/*Test.class,
                      org/jgroups/**/*Test\$*.class">
            <metainf dir="${src.dir}/org/jgroups/stack"
                includes="jboss-service.xml"/>
            <fileset dir="${conf.dir}" includes="*.dtd, *.xml" excludes="jboss-service.xml"/>
        </jar>
    </target>


    <target name="jgroups-service" depends="jar"
        description="Creates the service archive used to deploy a JGroups channel as a JBoss MBean">
        <jar jarfile="${dist.dir}/jgroups-service.sar"
            basedir="${compile.dir}"
            includes="org/jgroups/**"
            excludes="org/jgroups/demos/**,
                      org/jgroups/tests/**,
                      org/jgroups/**/*Test.class,
                      org/jgroups/**/*Test\$*.class">
            <metainf dir="${conf.dir}"
                includes="jboss-service.xml"/>
            <fileset dir="${conf.dir}" includes="*.dtd, *.xml" excludes="jboss-service.xml"/>
        </jar>
    </target>


    <!-- generate java doc -->
    <target name="javadoc"
        depends="prepare"
        description="Create Javadoc documentation in the ./dist/javadoc directory">
        <javadoc packagenames="${javadoc.packages}"
            sourcepath="${src.dir}"
            destdir="${javadoc.dir}"
            classpathref="jg.classpath"
            author="true"
            version="true"
            use="true"
            bottom="Copyright &#169; 1998-2005 Bela Ban. All Rights Reserved."
			useexternalfile="yes"
			doctitle="JGroups"
			overview="${src.dir}/org/jgroups/overview.html">
			<!-- The tag option for Javadoc is available in Java 1.4 or later. -->
			<tag name="todo" description="To do:"/>
			</javadoc>
    </target>

    <!-- Create the programmer's guide in the dist directory -->
    <target name="pg" depends="prepare"
        description="Create the Programmer's Guide (HTML)">
        <style in="${pg.dir}/main.xml"
            style="${docbook.dir}/html/docbook.xsl"
            out="${dist.dir}/pg/html/pg.html"/>
    </target>

    <!--
    <target name="chunkedhtml" depends="prepare"
            description="Generates the Programmer's Guide in chunked HTML">
	<style basedir="${pg.dir}"
	       includes="*.xml"
	       style="${docbook.dir}/html/chunk.xsl"
	       destdir="${dist.dir}/pg/html"/>
    </target>
    -->


    <target name="pdf" depends="prepare"
        description="Generates PDF for Programmer's Guide">
        <java classpathref="fop.classpath"
            classname="org.apache.fop.apps.Fop"
            fork="yes">
            <!-- Must use fully realized relative paths in arg tag -->
            <arg line="-xsl ${docbook.dir}/fo/docbook.xsl "/>
            <arg line="-xml ${pg.dir}/main.xml "/>
            <arg line="-pdf ${dist.dir}/pg/pdf/pg.pdf "/>
        </java>
    </target>


    <!-- clean up directories -->
    <target name="clean"
        description="Removes all class files and the ./dist directory">
        <delete dir="${compile.dir}" failonerror="false"/>
        <delete dir="${compile-cdc.dir}" failonerror="false"/>
        <delete dir="${dist.dir}" failonerror="false"/>
        <delete dir="${tmp.dir}" failonerror="false"/>
        <delete>
            <fileset dir="${root.dir}" defaultexcludes="no">
                <include name="**/*~"/>
            </fileset>
        </delete>
    </target>


    <!-- clean up directories -->
    <target name="cleanall"
        description="Removes all class files and the ./dist directory">
        <delete dir="${compile.dir}"/>
        <delete dir="${compile-cdc.dir}"/>
        <delete dir="${dist.dir}"/>
    	<delete dir="${keystore.dir}" failonerror="false"/>
        <delete>
            <fileset dir="${root.dir}" defaultexcludes="no">
                <include name="**/*~"/>
            </fileset>
        </delete>
    </target>


    <target name="all"
        depends="jar,javadoc"
        description="Compiles all files, creates JARs and Javadoc documentation"/>

    <target name="all-cdc"
        depends="jar-cdc,javadoc"
        description="Compiles all files for j2me/cdc/pp 1.0 configuration, creates JARs and Javadoc documentation"/>

    <target name="all-1.5"
        depends="jar-1.5,javadoc"
        description="Compiles all files (for 1.5), creates JARs and Javadoc documentation"/>


    <target name="version"
        depends="compile"
        description="Prints some info about the Ant version and the OS/JDK used">
        <echo message="${ant.version}"/>
        <echo message="JDK=${java.vm.version} on ${os.name} ${os.version}"/>
        <java classname="org.jgroups.Version" classpathref="jg.classpath"/>
    </target>

	<target name="makeKeystore"
			depends="compile"
			description="Generates an appropraite temporary keystore file for the unit tests and the JVM in use">
			<mkdir dir="${keystore.dir}"/>
			<java classname="org.jgroups.demos.KeyStoreGenerator" fork="true">
				<arg value="--storeName"/>
				<arg value="keystore/defaultStore.keystore"/>
				<classpath refid="jg.classpath"/>			   
			</java>
			<java classname="org.jgroups.demos.KeyStoreGenerator" fork="true">
				<arg value="--storeName"/>
				<arg value="keystore/defaultStore2.keystore"/>
				<classpath refid="jg.classpath"/>			   
			</java>
		</target>
	
	
    <target name="unittests"
        depends="compile, makeKeystore"    	
        description="Runs all unit tests in tests/junit and prints results to stdout">
        <junit printsummary="yes" timeout="${unittest.timeout.low}" fork="yes">
            <jvmarg value="-Djava.net.preferIPv4Stack=true"/>
            <classpath refid="jg.classpath"/>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${tmp.dir}">
                <fileset dir="${junit.dir}"
                    includes="**/*Test.java"/>
            </batchtest>
        </junit>
    	<delete dir="${keystore.dir}" failonerror="false"/>
    </target>


    <target name="unittests-cdc"
        depends="compile-cdc, makeKeystore"    	
        description="Runs all unit tests for j2me/cdc/pp 1.0 version in tests/junit and prints results to stdout">
        <junit printsummary="yes" timeout="${unittest.timeout.low}" fork="yes">
            <jvmarg value="-Djava.net.preferIPv4Stack=true"/>
            <classpath refid="jg-cdc.classpath"/>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${tmp.dir}">
                <fileset dir="${junit.dir}"
                    includes="**/*Test.java">
                  <exclude name="org/jgroups/protocols/ENCRYPT14KeystoreTest.java"/>
                  <exclude name="org/jgroups/protocols/ENCRYPTAsymmetricTest.java"/>
                  <exclude name="org/jgroups/tests/UNICAST_Test.java"/>
                  <exclude name="org/jgroups/tests/SizeTest.java"/>
                  <exclude name="org/jgroups/tests/LogicalAddressTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    	<delete dir="${keystore.dir}" failonerror="false"/>
    </target>


    <target name="unittests-xml" depends="compile, makeKeystore">
        <delete dir="${tmp.dir}/tests-results"/>
        <mkdir dir="${tmp.dir}/tests-results"/>
        <junit printsummary="yes" timeout="${unittest.timeout.low}" fork="yes">
            <jvmarg value="-Djava.net.preferIPv4Stack=true"/>
            <jvmarg value="-Dtests.tmp.dir=${tmp.dir}"/>
            <classpath refid="jg.classpath"/>
            <formatter type="xml" usefile="true"/>
            <batchtest todir="${tmp.dir}/tests-results">
                <fileset dir="${junit.dir}"
                    includes="**/*Test.java"/>
            </batchtest>
        </junit>
    </target>


    <target name="unittests-xml-cdc" depends="compile-cdc, makeKeystore">
        <delete dir="${tmp.dir}/tests-results"/>
        <mkdir dir="${tmp.dir}/tests-results"/>
        <junit printsummary="yes" timeout="${unittest.timeout.low}" fork="yes">
            <jvmarg value="-Djava.net.preferIPv4Stack=true"/>
            <jvmarg value="-Dtests.tmp.dir=${tmp.dir}"/>
            <classpath refid="jg-cdc.classpath"/>
            <formatter type="xml" usefile="true"/>
            <batchtest todir="${tmp.dir}/tests-results">
                <fileset dir="${junit.dir}"
                    includes="**/*Test.java">
                  <exclude name="org/jgroups/protocols/ENCRYPT14KeystoreTest.java"/>
                  <exclude name="org/jgroups/protocols/ENCRYPTAsymmetricTest.java"/>
                  <exclude name="org/jgroups/tests/UNICAST_Test.java"/>
                  <exclude name="org/jgroups/tests/SizeTest.java"/>
                  <exclude name="org/jgroups/tests/LogicalAddressTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>


    <target name="findxalan">
        <available property="xalan.available" classname="org.apache.xalan.Version"/>
        <fail unless="xalan.available"
            message="Xalan was not found. Please add the xalan.jar file from the lib directory to the CLASSPATH and retry"/>
    </target>


    <target name="testreport"
        depends="findxalan,unittests-xml"
        if="xalan.available"
        description="Generates HTML from unit tests (target unitests-xml must have run before)">
        <delete dir="${tmp.dir}/html"/>
        <mkdir dir="${tmp.dir}/html"/>
        <junitreport todir="${tmp.dir}/html">
            <fileset dir="${tmp.dir}/tests-results" includes="**/TEST-*.xml"/>
            <report todir="${tmp.dir}/html"/>
        </junitreport>
        <echo message="********************************************************************"/>
        <echo message="The unit test report is available in ${tmp.dir}/html/index.html"/>
        <echo message="********************************************************************"/>
    </target>


    <target name="testreport-cdc"
        depends="findxalan,unittests-xml-cdc"
        if="xalan.available"
        description="Generates HTML from j2me/cdc/pp 1.0 configuration unit tests (target unitests-xml-cdc must have run before)">
        <delete dir="${tmp.dir}/html"/>
        <mkdir dir="${tmp.dir}/html"/>
        <junitreport todir="${tmp.dir}/html">
            <fileset dir="${tmp.dir}/tests-results" includes="**/TEST-*.xml"/>
            <report todir="${tmp.dir}/html"/>
        </junitreport>
        <echo message="********************************************************************"/>
        <echo message="The unit test report is available in ${tmp.dir}/html/index.html"/>
        <echo message="********************************************************************"/>
    </target>


</project>
