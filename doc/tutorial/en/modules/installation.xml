<chapter>
    <title>Download</title>

    <para>
        JGroups can be downloaded <ulink url="http://sourceforge.net/project/showfiles.php?group_id=6081">here</ulink>.
        For this tutorial, I'm using the binary version of JGroups 2.5, so the ZIP file to download is
        JGroups-2.5.0.bin.zip. <emphasis>Note that JGroups 2.5 requires JDK 1.5 or higher</emphasis>.
    </para>

    <para>
        Unzip JGroups-2.5.0.bin.zip into a directory JGroups-2.5.0.bin. The contents of the directory are
        <figure id="BinaryContents">
            <title>Screenshot of the JGroups binary distribution</title>
            <graphic fileref="images/BinaryContents.png" format="PNG" align="center"/>
        </figure>
    </para>

    <para>
        The most important files are:
        <itemizedlist>
            <listitem>
                <para>jgroups.bat and jgroups.sh: scripts to run a JGroups application (including the correct JARs and
                    XML files)</para>
            </listitem>
            <listitem>
                <para>INSTALL.html: detailed configuration instructions plus trouble shooting</para>
            </listitem>
            <listitem>
                <para>commons-logging.jar: <emphasis>required</emphasis> JAR that provides general logging. This
                    might get dropped in 3.0</para>
            </listitem>
            <listitem>
                <para>jgroups-all.jar (<emphasis>required</emphasis>): JGroups functionality, including demo and junit
                    apps. If a smaller JAR is required, this can be done by downloading the source distribution and
                    invoking the "jar" target, which creates a jgroups-core.jar file (ca 1MB).</para>
            </listitem>
            <listitem>
                <para>log4j.jar (optional): commons-logging can also use JDK logging</para>
            </listitem>
            <listitem>
                <para>Various XML file: different JGroups configurations, e.g.</para>
                <itemizedlist>
                    <listitem>
                        <para>mping.xml: TCP based stack with dynamic discovery</para>
                    </listitem>
                    <listitem>
                        <para>sfc.xml: UDP (using IP multicasting) based stack with simple flow control</para>
                    </listitem>
                    <listitem>
                        <para>tcp-nio.xml: TCP based stack with fixed configuration (list of nodes) using NIO (thread
                            pool for all TCP connections)</para>
                    </listitem>
                    <listitem>
                        <para>tcp-nio.xml: TCP based stack with fixed configuration (list of nodes) using plain TCP
                            (1 thread / TCP connection)</para>
                    </listitem>
                    <listitem>
                        <para>tcpgossip.xml: tunnel based configuration which routes messages to a remote
                            GossipRouter, used to tunnel firewalls</para>
                    </listitem>
                    <listitem>
                        <para>udp.xml: default IP multicast based configuration</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para>
                    config.txt: configuration file for performance tests
                </para>
            </listitem>
        </itemizedlist>
    </para>


    <section>
        <title>Configuration</title>
        <para>
            Add jgroups-all.jar and commons-logging.jar to your CLASSPATH. If you use the log4j logging system, you also
            have to add log4j.jar (this is not necessary if you use the JDK logging system).
        </para>
        <para>
            As an alternative, you can also use jgroups.bat. Note that jgroups.sh requires work, as it uses backslashes
            (developed under Cygwin/Windows), so it is currently not usable under UNIX as is.
        </para>
    </section>

    <section>
        <title>Testing your Setup</title>

        <para>To see whether your system can find the JGroups classes,
            execute the following command:</para>

        <screen>
            java org.jgroups.Version
        </screen>

        <para>or</para>

        <screen>
            java -jar jgroups-all.jar
        </screen>

        <para>You should see the following output (more or less) if the
            class is found:</para>

        <screen>
            $ java -jar jgroups-all.jar

            Version:        2.5.0
            CVS:            $Id: installation.xml,v 1.2 2007/07/16 10:17:23 belaban Exp $
            History:        (see doc/history.txt for details)
        </screen>

    </section>

    <section>
        <title>Running a Demo Program</title>

        <para>To test whether JGroups works okay on your machine, run
            the following command twice:</para>

        <screen>
            java org.jgroups.demos.Draw
        </screen>

        <para>2 whiteboard windows should appear as shown in <xref linkend="DrawScreenshotFig"/>.

            <figure id="DrawScreenshotFig"><title>Screenshot of 2 Draw instances</title>
                <graphic fileref="images/DrawScreenshot.png" format="PNG" align="center"  />
            </figure>

            If you started them
            simultaneously, they should initially show a membership of 1 in
            their title bars. After some time, both windows should show
            2. This means that the two instances found each other and formed a
            group.</para>

        <para>When drawing in one window, the second instance should also
            be updated. As the default group transport uses IP multicast, make
            sure that - if you want start the 2 instances in different subnets
            - IP multicast is enabled. If this is not the case, the 2
            instances won't 'find' each other and the sample won't work.</para>

        <para>You can change the properties of the demo to for example use
            a different transport if multicast doesn't work (it should always
            work on the same machine). Please consult the documentation to see
            how to do this.</para>

    </section>

    <section>
        <title>Using IP Multicasting without a network
            connection</title>

        <para>Sometimes there isn't a network connection (e.g. DSL modem
            is down), or we want to multicast only on the local machine. For
            this the loopback interface (typically lo) can be configured,
            e.g.</para>

        <screen>
            route add -net 224.0.0.0 netmask 240.0.0.0 dev lo
        </screen>

        <para>This means that all traffic directed to the 224.0.0.0
            network will be sent to the loopback interface, which means it
            doesn't need any network to be running. Note that the 224.0.0.0
            network is a placeholder for all multicast addresses in most UNIX
            implementations: it will catch
            <emphasis>all</emphasis>
            multicast
            traffic. This is an undocumented feature of
            <filename>/sbin/route</filename>
            and may not work across all UNIX
            flavors. The above instructions may also work for Windows systems,
            but this hasn't been tested. Note that not all systems allow
            multicast traffic to use the loopback interface.
        </para>

        <para>Typical home networks have a gateway/firewall with 2 NICs:
            the first (eth0) is connected to the outside world (Internet
            Service Provider), the second (eth1) to the internal network, with
            the gateway firewalling/masquerading traffic between the internal
            and external networks. If no route for multicast traffic is added,
            the default will be to use the fdefault gateway, which will
            typically direct the multicast traffic towards the ISP. To prevent
            this (e.g. ISP drops multicast traffic, or latency is too high),
            we recommend to add a route for multicast traffic which goes to
            the internal network (e.g. eth1).</para>

    </section>

    <section id="ItDoesntWork">
        <title>It doesn't work !</title>

        <para>Make sure your machine is set up correctly for IP
            multicast. There are 2 test programs that can be used to detect
            this: McastReceiverTest and McastSenderTest. Start
            McastReceiverTest, e.g.</para>

        <screen>
            java org.jgroups.tests.McastReceiverTest -mcast_addr 224.10.10.10 -port 5555
        </screen>

        <para>Then start McastSenderTest:</para>

        <screen>
            java org.jgroups.tests.McastSenderTest -mcast_addr 224.10.10.10 -port 5555
        </screen>

        <para>If you want to bind to a specific network interface card (NIC), use -bind_addr 192.168.0.2,
        where 192.168.0.2 is the IP address of the NIC to which you want to bind. Use this parameter in both
        sender and receiver.</para>

        <para>You should be able to type in the McastSenderTest window and
            see the output in the McastReceiverTest. If not, try to use -ttl
            32 in the sender. If this still fails, consult a system
            administrator to help you setup IP multicast correctly. If you are
            the system administrator, look for another job :-)</para>

        <para>Other means of getting help: there is a public forum on
            <ulink url="http://jira.jboss.com/jira/browse/JGRP">JIRA</ulink>
            for questions. Also consider subscribing to the javagroups-users
            mailing list to discuss such and other problems.
        </para>

    </section>

    <section>
        <title>The instances still don't find each other !</title>

        <para>In this case we have to use a sledgehammer (running only
            under JDK 1.4. and higher): we can enable the above sender and
            receiver test to use all available interfaces for sending and
            receiving. One of them will certainly be the right one... Start
            the receiver as follows:</para>

        <screen>
            java org.jgroups.tests.McastReceiverTest1_4 -mcast_addr 228.8.8.8 -use_all_interfaces
        </screen>

        <para>The multicast receiver uses the 1.4 functionality to list
            <emphasis>all available network interfaces and bind to all of
                them</emphasis>
            (including the loopback interface). This means
            that whichever interface a packet comes in on, we will receive it.
            Now start the sender:
        </para>

        <screen>
            java org.jgroups.tests.McastSenderTest1_4 -mcast_addr 228.8.8.8 -use_all_interfaces
        </screen>

        <para>The sender will also determine the available network
            interfaces and send each packet over all interfaces.</para>

        <para>This test can be used to find out which network interface to
            bind to when previously no packets were received. E.g. when you
            see the following output in the receiver:</para>

        <screen>
            bash-2.03$ java org.jgroups.tests.McastReceiverTest1_4 -mcast_addr 228.8.8.8 -bind_addr 192.168.168.4
            Socket=0.0.0.0/0.0.0.0:5555, bind interface=/192.168.168.4
            dd [sender=192.168.168.4:5555]
            dd [sender=192.168.168.1:5555]
            dd [sender=192.168.168.2:5555]
        </screen>

        <para>you know that you can bind to any of the 192.168.168.{1,2,4}
            interfaces to receive your multicast packets. In this case you
            would need to modify your protocol spec to include
            bind_addr=192.168.168.2 in UDP, e.g.
            <parameter>"UDP(mcast_addr=228.8.8.8;bind_addr=192.168.168.2):..."
            </parameter>
            .
        </para>

        <para>Alternatively you can use McastDiscovery1_4 (runs only on
            JDK 1.4). Start this program simultaneously on multiple
            machines. Binding to all available interfaces, this program tries
            to discover what other members are available in a network and
            determines which interfaces should be used by UDP. After some time
            (e.g. 30 seconds), press &lt;enter&gt; on each program. The
            program will then list the interfaces which can be used to bind
            to. There may be one or multiple interfaces. When there are
            multiple interfaces listed, take the one with the highest number
            of responses (at the top of the list). The UDP protocol spec can
            then be changed to explicitly bind to that interface, e.g.</para>

        <screen>
            "UDP(bind_addr=&lt;interface&gt;;...)"
        </screen>

    </section>

    <section>
        <title>Problems with IPv6</title>

        <para>Another source of problems might be the use of IPv6, and/or
            misconfiguration of
            <filename>/etc/hosts</filename>
            . If you
            communicate between an IPv4 and an IPv6 host, and they are not
            able to find each other, try the
            <parameter>java.net.preferIP4Stack=true</parameter>
            property,
            e.g.
        </para>

        <screen>
            java -Djava.net.preferIPv4Stack=true org.jgroups.demos.Draw -props file:c:\\udp.xml
        </screen>

        <para>JDK 1.4.1 uses IPv6 by default, although is has a dual
            stack, that is, it also supports IPv4.
            <ulink
                    url="http://java.sun.com/j2se/1.4/docs/guide/net/ipv6_guide/">Here's</ulink>
            more details on the subject.
        </para>

    </section>

    <section>
        <title>Wiki</title>
        <para>
            There is a wiki which lists FAQs and their solutions at
            <ulink url="http://www.jboss.org/wiki/Wiki.jsp?page=JGroups"/>. It is frequently updated and a useful companion
            to this user's guide.
        </para>
    </section>

    <section>
        <title>I have discovered a bug !</title>

        <para>If you think that you discovered a bug, submit a bug report
            on
            <ulink
                    url="http://jira.jboss.com/jira/browse/JGRP">JIRA</ulink>
            or send
            email to javagroups-developers if you're unsure about it. Please
            include the following information:
        </para>

        <itemizedlist>
            <listitem>
                <para>Version of JGroups (java org.jgroups.Version)</para>
            </listitem>
            <listitem>
                <para>Platform (e.g. Solaris 8)</para>
            </listitem>
            <listitem>
                <para>Version of JDK (e.g. JDK 1.4.2_07)</para>
            </listitem>
            <listitem>
                <para>Stack trace. Use kill -3 PID on UNIX systems or
                    CTRL-BREAK on windows machines</para>
            </listitem>
            <listitem>
                <para>Small program that reproduces the bug</para>
            </listitem>
        </itemizedlist>

    </section>

</chapter>



