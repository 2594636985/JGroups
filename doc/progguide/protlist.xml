<chapter id="protlist"><title>List of Protocols</title>

  <para>For each protocol define:</para>

  <itemizedlist>
    <listitem><para>Properties provided</para></listitem>
    <listitem><para>Required services</para></listitem>
    <listitem><para>Provided services</para></listitem>
    <listitem><para>Behavior</para></listitem>
  </itemizedlist>

  <section><title>Transport</title>

    <section><title>UDP</title>

      <para></para>

    </section>

    <section><title>TCP</title>

      <para></para>

    </section>

    <section><title>TUNNEL</title>

      <para></para>

    </section>

    <section><title>JMS</title>

      <para></para>

    </section>

    <section><title>LOOPBACK</title>

      <para></para>

    </section>

  </section>

  <section><title>Initinial membership discovery</title>

    <section><title>PING</title>

      <para></para>

    </section>

    <section><title>TCPPING</title>

      <para></para>

    </section>

    <section><title>TCPGOSSIP</title>

      <para></para>

    </section>

  </section>

  <section><title>Fragmentation</title>

    <section><title>FRAG</title>

      <para></para>

    </section>

  </section>

  <section><title>Reliable message transmission</title>

    <section><title>NAKACK</title>

      <para></para>

    </section>

    <section><title>pbcast.NAKACK</title>

      <para></para>

    </section>

    <section><title>SMACK</title>

      <para></para>

    </section>

    <section><title>UNICAST</title>

      <para></para>

    </section>

  </section>

  <section><title>Ordering (FIFO covered by NAKACK)</title>

    <section><title>CAUSAL</title>

      <para></para>

    </section>

    <section><title>Total Order (sequencer: TOTAL, token-passing:
    TOTAL_TOKEN</title>

      <para></para>

    </section>

  </section>

  <section><title>Group Membership</title>

    <section><title>PING</title>

      <para></para>

    </section>

    <section><title>GMS, pbcast.GMS</title>

      <para></para>

    </section>

    <section><title>Disabling the initial coordinator</title>

      <para>Consider the following situation: a new member wants to
      join a group. The prodedure to do so is:</para>

      <itemizedlist>
	<listitem>
	  <para>Multicast an (unreliable) discovery request (ping)</para>
	</listitem>
	<listitem>
	  <para>Wait for n responses or m milliseconds (whichever is
	  first)</para>
	</listitem>
	<listitem>
	  <para>Every member responds with the address of the
	  coordinator</para>
	</listitem>
	<listitem>
	  <para>If the initial responses are > 0: determine the
	  coordinator and start the JOIN protocolg</para>
	</listitem>
	<listitem>
	  <para>If the initial response are 0: become coordinator,
	  assuming that no one else is out there</para>
	</listitem>
      </itemizedlist>

      <para>However, the problem is that the initial mcast discovery
      request might get lost, e.g. when multiple members start at the
      same time, the outgoing network buffer might overflow, and the
      mcast packet might get dropped.  Nobody receives it and thus the
      sender will not receive any responses, resulting in an initial
      membership of 0. This could result in multiple coordinators, and
      multiple subgroups forming. How can we overcome this problem ?
      There are 3 solutions:</para>

      <orderedlist>
	<listitem>
	  <para>Increase the timeout, or number of responses
	  received. This will only help if the reason of the empty
	  membership was a slow host. If the mcast packet was dropped,
	  this solution won't help</para>
	</listitem>
	<listitem>
	  <para>Add the MERGE(2) protocol. This doesn't actually
	  prevent multiple initial cordinators, but rectifies the
	  problem by merging different subgroups back into one. Note
	  that this involves state merging which needs to be done by
	  the application.</para>
	</listitem>
	<listitem>
	  <para>(new) Prevent members from becoming coordinator on
	  initial startup. This solution is applicable when we know
	  which member is going to be the initial coordinator of a
	  fresh group. We don't care about afterwards, then
	  coordinatorship can migrate to another member. In this case,
	  we configure the member that is always supposed to be
	  started first with disable_initial_coord=false (the default)
	  and all other members with disable_initial_coord=true.This
	  works as described below.</para>
	</listitem>
      </orderedlist>

      <para>When the initial membership is received, and is null, and
      the property disable_initial_coord is true, then we just
      continue in the loop and retry receving the initial membership
      (until it is non-null). If the property is false, we are allowed
      to become coordinator, and will do so. Note that - if a member
      is started as first member of a group - but its property is set
      to true, then it will loop until another member whose
      disable_initial_coord property is set to false, is
      started.</para>

    </section>

  </section>

  <section><title>Virtual Synchrony</title>
    
    <section><title>FLUSH</title>

      <para></para>

    </section>

    <section><title>QUEUE</title>

      <para></para>
      
    </section>
    
    <section><title>VIEW_ENFORCER</title>
      
      <para></para>
      
    </section>
    
  </section>
  
  <section><title>Failure Detection</title>
    
    <section><title>FD</title>
      
      <para></para>
      
    </section>
    
    <section><title>FD_SIMPLE</title>
      
      <para></para>
	
    </section>
    
    <section><title>FD_PID</title>
      
      <para></para>

    </section>
    
    <section><title>FD_SOCK</title>
      
      <para></para>
      
    </section>
    
    <section><title>FD_PROB</title>
      
      <para></para>

    </section>
    
  </section>
  
  <section><title>Probabilistic Broadcast</title>
    
    <section><title>PBCAST</title>

      <para></para>
      
    </section>
    
  </section>
  
  <section><title>Encryption</title>
    
    <para></para>
    
  </section>
  
  <section><title>State Transfer</title>
    
    <section><title>STATE_TRANSFER, pbcast.STATE_TRANSFER</title>
      
      <para></para>
      
    </section>
    
  </section>

  <section><title>Merge</title>
    
    <section><title>MERGE, MERGE2</title>
      
      <para></para>
      
    </section>
    
  </section>

  <section><title>Debugging</title>
    
    <section><title>PERF</title>
      
      <para></para>
      
    </section>
    
    <section><title>SIZE</title>
      
      <para></para>
      
    </section>
    
    <section><title>TRACE</title>
      
      <para></para>
      
    </section>
    
    <section><title>PRINTOBJS</title>
      
      <para></para>
      
    </section>
    
  </section>

  <section><title>Misc</title>
    
    <section><title>PIGGYBACK</title>
      
      <para></para>
      
    </section>
    
    <section><title>STABLE, pbcast.STABLE</title>
      
      <para></para>
      
    </section>
    
  </section>

  <section><title>Use case: joining a group</title>

    <para></para>

  </section>

  <section><title>Use case: leaving a group</title>

    <para></para>

  </section>

  <section><title>Use case: removing a crashed member</title>

    <para></para>

  </section>

</chapter>
